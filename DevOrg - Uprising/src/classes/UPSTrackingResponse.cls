//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are reserved words in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class UPSTrackingResponse {

    public TrackResponse TrackResponse {get;set;}

    public static void consumeObject(JSONParser parser) {
        Integer depth = 0;
        do {
            JSONToken curr = parser.getCurrentToken();
            if (curr == JSONToken.START_OBJECT ||
                curr == JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == JSONToken.END_OBJECT ||
                curr == JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
    }

    public class Status {
        public String Type_Z {get;set;} // in json: Type
        public String Description {get;set;}
        public String Code {get;set;}

        public Status(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Type') {
                            Type_Z = parser.getText();
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else if (text == 'Code') {
                            Code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Status consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class TransactionReference {
        public String CustomerContext {get;set;}

        public TransactionReference(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'CustomerContext') {
                            CustomerContext = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'TransactionReference consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public UPSTrackingResponse(JSONParser parser) {
        while (parser.nextToken() != JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != JSONToken.VALUE_NULL) {
                    if (text == 'TrackResponse') {
                        TrackResponse = new TrackResponse(parser);
                    } else {
                        System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }

    public class Address {
        public String AddressLine {get;set;}
        public String City {get;set;}
        public String StateProvinceCode {get;set;}
        public String PostalCode {get;set;}
        public String CountryCode {get;set;}

        public Address(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'AddressLine') {
                            AddressLine = parser.getText();
                        } else if (text == 'City') {
                            City = parser.getText();
                        } else if (text == 'StateProvinceCode') {
                            StateProvinceCode = parser.getText();
                        } else if (text == 'PostalCode') {
                            PostalCode = parser.getText();
                        } else if (text == 'CountryCode') {
                            CountryCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class UnitOfMeasurement {
        public String Code {get;set;}

        public UnitOfMeasurement(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'UnitOfMeasurement consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Activity {
        public ActivityLocation ActivityLocation {get;set;}
        public Status Status {get;set;}
        public String DateStr {get;set;}
        public String TimeStr {get;set;}

        public Activity(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'ActivityLocation') {
                            ActivityLocation = new ActivityLocation(parser);
                        } else if (text == 'Status') {
                            Status = new Status(parser);
                        } else if (text == 'Date') {
                            DateStr = parser.getText();
                        } else if (text == 'Time') {
                            TimeStr = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Activity consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Shipment {
        public InquiryNumber InquiryNumber {get;set;}
        public String ShipperNumber {get;set;}
        public ShipmentAddress ShipmentAddress {get;set;}
        public ShipmentWeight ShipmentWeight {get;set;}
        public ResponseStatus Service {get;set;}
        public Package_Z Package_Z {get;set;} // in json: Package

        public Shipment(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'InquiryNumber') {
                            InquiryNumber = new InquiryNumber(parser);
                        } else if (text == 'ShipperNumber') {
                            ShipperNumber = parser.getText();
                        } else if (text == 'ShipmentAddress') {
                            ShipmentAddress = new ShipmentAddress(parser);
                        } else if (text == 'ShipmentWeight') {
                            ShipmentWeight = new ShipmentWeight(parser);
                        } else if (text == 'Service') {
                            Service = new ResponseStatus(parser);
                        } else if (text == 'Package') {
                            Package_Z = new Package_Z(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Shipment consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class InquiryNumber {
        public String Code {get;set;}
        public String Description {get;set;}
        public String Value {get;set;}

        public InquiryNumber(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else if (text == 'Value') {
                            Value = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'InquiryNumber consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class ShipmentWeight {
        public UnitOfMeasurement UnitOfMeasurement {get;set;}
        public String Weight {get;set;}

        public ShipmentWeight(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'UnitOfMeasurement') {
                            UnitOfMeasurement = new UnitOfMeasurement(parser);
                        } else if (text == 'Weight') {
                            Weight = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ShipmentWeight consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Response {
        public ResponseStatus ResponseStatus {get;set;}
        public TransactionReference TransactionReference {get;set;}

        public Response(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'ResponseStatus') {
                            ResponseStatus = new ResponseStatus(parser);
                        } else if (text == 'TransactionReference') {
                            TransactionReference = new TransactionReference(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Response consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class ResponseStatus {
        public String Code {get;set;}
        public String Description {get;set;}

        public ResponseStatus(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Code') {
                            Code = parser.getText();
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ResponseStatus consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class ShipmentAddress {
        public ResponseStatus Type_Z {get;set;} // in json: Type
        public Address Address {get;set;}

        public ShipmentAddress(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Type') {
                            Type_Z = new ResponseStatus(parser);
                        } else if (text == 'Address') {
                            Address = new Address(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'ShipmentAddress consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class TrackResponse {
        public Response Response {get;set;}
        public Shipment Shipment {get;set;}
        public String Disclaimer {get;set;}

        public TrackResponse(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Response') {
                            Response = new Response(parser);
                        } else if (text == 'Shipment') {
                            Shipment = new Shipment(parser);
                        } else if (text == 'Disclaimer') {
                            Disclaimer = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'TrackResponse consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Package_Z {
        public String TrackingNumber {get;set;}
        public Activity Activity {get;set;}
        public ShipmentWeight PackageWeight {get;set;}

        public Package_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'TrackingNumber') {
                            TrackingNumber = parser.getText();
                        } else if (text == 'Activity') {
                            Activity = new Activity(parser);
                        } else if (text == 'PackageWeight') {
                            PackageWeight = new ShipmentWeight(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Package_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class Address_Z {
        public String City {get;set;}
        public String StateProvinceCode {get;set;}
        public String PostalCode {get;set;}
        public String CountryCode {get;set;}

        public Address_Z(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'City') {
                            City = parser.getText();
                        } else if (text == 'StateProvinceCode') {
                            StateProvinceCode = parser.getText();
                        } else if (text == 'PostalCode') {
                            PostalCode = parser.getText();
                        } else if (text == 'CountryCode') {
                            CountryCode = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Address_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public class ActivityLocation {
        public Address_Z Address {get;set;}
        public String Code {get;set;}
        public String Description {get;set;}
        public String SignedForByName {get;set;}

        public ActivityLocation(JSONParser parser) {
            while (parser.nextToken() != JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != JSONToken.VALUE_NULL) {
                        if (text == 'Address') {
                            Address = new Address_Z(parser);
                        } else if (text == 'Code') {
                            Code = parser.getText();
                        } else if (text == 'Description') {
                            Description = parser.getText();
                        } else if (text == 'SignedForByName') {
                            SignedForByName = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'ActivityLocation consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

    public static UPSTrackingResponse parse(String json) {
        return new UPSTrackingResponse(System.JSON.createParser(json));
    }
}